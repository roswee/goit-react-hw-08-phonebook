{"version":3,"file":"static/js/77.ea576b50.chunk.js","mappings":"iLACA,IAkBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,E,oCC7BYQ,EAAQ,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASA,QAAnB,IAC5BG,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,MACV,GAAE,CAACH,IAyBJ,OACE,kBAAMI,SAxBa,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,cACXC,EAAOF,EAAKG,SAASD,KAAKE,MAC1BC,EAAQL,EAAKG,SAASE,MAAMD,MAOlC,OANAJ,EAAKM,QAEahB,EAASiB,KAAI,SAAAC,GAC7B,OAAOA,EAAQN,IAChB,IAEaO,SAASP,GACdQ,MAAM,GAAD,OAAIR,EAAJ,6BAEPT,GACLkB,EAAAA,EAAAA,IAAW,CACT9B,GAAIF,IACJuB,KAAAA,EACAG,MAAAA,IAGL,EAGC,WACE,6BACG,IADH,QAGE,kBACEO,KAAK,OACLV,KAAK,OACLW,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,6BACG,IADH,UAGE,kBACEH,KAAK,MACLV,KAAK,QACLW,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQH,KAAK,SAAb,2BAGL,EC3DYI,EAAe,WAC1B,IAAMvB,GAAWC,EAAAA,EAAAA,MAGXuB,GAAY1B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMyB,SAAV,IAC7B3B,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASA,QAAnB,IAC5B4B,GAAS3B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAM0B,MAAV,IAC1BC,EAAmB7B,EAAS4B,QAAO,SAAAV,GAAO,OAC9CA,EAAQN,KAAKkB,cAAcX,SAASS,EADU,IAOhD,OAHAvB,EAAAA,EAAAA,YAAU,WACT,GAAE,CAACL,EAAU6B,KAGZ,gCAAGF,IAAa,+CACO,IAApB3B,EAAS+B,QACR,0DAEA,wBACGF,EAAiBZ,KAAI,SAAAC,GAAO,OAC3B,0BACGA,EAAQN,KADX,KACmBM,EAAQH,MAAO,KAChC,mBACEO,KAAK,SACLU,QAAS,kBAAM7B,GAAS8B,EAAAA,EAAAA,IAAcf,EAAQ3B,IAArC,EAFX,sBAFO2B,EAAQ3B,GADU,QAetC,ECtCY2C,GAAcC,E,OAAAA,IAAY,CACrCvB,KAAM,SACNwB,aAAc,GACdC,SAAU,CACRC,UAAW,SAACpC,EAAD,YAAUqC,OAAV,KAIDD,EAAaJ,EAAYM,QAAzBF,UCPDG,GDQgBP,EAAYQ,QCRnB,WACpB,IAAMvC,GAAWC,EAAAA,EAAAA,MAOX,OACE,yDAEI,kBAAOQ,KAAK,SAAS+B,SARZ,SAAAC,GACnB,IAAM9B,EAAQ8B,EAAEC,OAAO/B,MAAMgB,cAC7B3B,EAASmC,EAAUxB,GACpB,MASE,GCdU,SAASgC,IACtB,OACE,iCACE,uCACA,SAAC/C,EAAD,KACA,SAAC0C,EAAD,KACA,SAACf,EAAD,MAGL,C","sources":["../node_modules/nanoid/index.browser.js","components/Adder/Adder.jsx","components/ContactsList/ContactsList.jsx","redux/phonebook/filterSlice.js","components/Filter/Filter.jsx","pages/PhonebookPage.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { addContact } from 'redux/phonebook/operations';\nimport { fetchContacts } from 'redux/phonebook/operations';\n\nexport const Adder = () => {\n  const contacts = useSelector(state => state.contacts.contacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const name = form.elements.name.value;\n    const phone = form.elements.phone.value;\n    form.reset()\n\n    const nameArray = contacts.map(contact => {\n      return contact.name;\n    });\n\n    if (nameArray.includes(name)) {\n      return alert(`${name} is already in contacts.`);\n    }\n    return dispatch(\n      addContact({\n        id: nanoid(),\n        name,\n        phone,\n      })\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        {' '}\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        {' '}\n        Number\n        <input\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeContact } from 'redux/phonebook/operations';\nimport { useEffect } from 'react';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n\n\n  const isLoading = useSelector(state => state.isLoading)\n  const contacts = useSelector(state => state.contacts.contacts);\n  const filter = useSelector(state => state.filter);\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  )\n\n  useEffect(() => {\n  }, [contacts, filteredContacts])\n  \n  return (\n    <>{isLoading && <b>Loading contacts...</b>}\n      {contacts.length === 0 ? (\n        <p>Add some contact to see them.</p>\n      ) : (\n        <ul>\n          {filteredContacts.map(contact => (\n            <li key={contact.id}>\n              {contact.name}: {contact.phone}{' '}\n              <button\n                type=\"submit\"\n                onClick={() => dispatch(removeContact(contact.id))}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.array,\n};\n\nexport default ContactsList;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState: '',\n  reducers: {\n    setFilter: (state, { payload }) => payload,\n  }\n});\n\nexport const {setFilter} = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;","import { useDispatch } from 'react-redux'\nimport { setFilter } from 'redux/phonebook/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  \n  const handleFinder = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value))\n  }\n\n        return (\n          <>\n          Find contacts by name \n              <input name=\"filter\" onChange={handleFinder}></input>\n          </>\n\n        )\n    }\n\n","import { Adder } from 'components/Adder/Adder';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function PhonebookPage() {\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <Adder />\n      <Filter/>\n      <ContactsList />\n    </>\n  );\n};"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Adder","contacts","useSelector","state","dispatch","useDispatch","useEffect","fetchContacts","onSubmit","evt","preventDefault","form","currentTarget","name","elements","value","phone","reset","map","contact","includes","alert","addContact","type","pattern","title","required","ContactsList","isLoading","filter","filteredContacts","toLowerCase","length","onClick","removeContact","filterSlice","createSlice","initialState","reducers","setFilter","payload","actions","Filter","reducer","onChange","e","target","PhonebookPage"],"sourceRoot":""}